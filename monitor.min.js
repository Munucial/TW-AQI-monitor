function getvalinobj(t, e) {
    return Object.keys(t).reduce(function(i, a) {
        return t[a] && "object" == typeof t[a] ? i.concat(getStates(t[a], e)) : (a === e && i.push(t[e]), i)
    }, [])
}
var express = require("express"),
    app = express(),
    request = require("request"),
    fs = require("fs"),
    jsonfile = require("jsonfile"),
    aqifile = __dirname + "/output/aqi.json",
    aqi, aqifull, cron = require("node-cron"),
    url = require("url");
cron.schedule("0 * * * *", function() {
    request("https://taqm.epa.gov.tw/taqm/aqs.ashx?lang=tw&act=aqi-epa", function(t, e, a) {
        aqifull = JSON.parse(a), aqi = aqifull.Data;
        var r = jsonfile.readFileSync("./data/data.json");
        if ("ok" == aqifull.Result)
            for (i = 0; i < aqi.length; i++) {
                var s = {};
                if (s.name = aqi[i].SiteName, s.addr = aqi[i].Address, s.aqi = aqi[i].AQI, s.pollutant = {}, s.pollutant.key = aqi[i].MainPollutant, "hr" == aqi[i].MainPollutantKey.substr(aqi[i].MainPollutantKey.length - 2, 2)) l = aqi[i].MainPollutantKey.substr(0, aqi[i].MainPollutantKey.length - 2);
                else var l = aqi[i].MainPollutantKey;
                s.pollutant.value = aqi[i][l];
                var n = new Date,
                    u = n.getUTCFullYear() + "-" + (n.getUTCMonth() + 1) + "-" + n.getUTCDate() + "-" + n.getUTCHours();
                r[s.name] || (r[s.name] = {}), s.timestamp = u, r[s.name][u] = s
            }
        jsonfile.writeFileSync("./data/data.json", r)
    });
    (new Date).toUTCString()
}), app.use("/files", express.static(__dirname + "/public")), app.get("/", function(t, e) {
    var a, r = jsonfile.readFileSync("./data/data.json"),
        s = (Object.keys(r).length, Object.keys(r));
    if (0 == Object.keys(r).length) e.status(404).send("<h1>Sorry no data!</h1>");
    else {
        for (e.writeHead(200, {
                "Content-Type": "text/html"
            }), e.write('<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">'), e.write("<table>"), e.write("<tr><th>地點</th><th>時間</th><th>重點汙染值</th></tr>"), i = 0; i < s.length; i++) a = r[s[i]][Object.keys(r[s[i]])[Object.keys(r[s[i]]).length - 1]], e.write("<tr><td>" + a.name + "</td><td>" + a.timestamp + "</td><td>" + a.pollutant.key + ": " + a.pollutant.value + "</td></tr>");
        e.write("</table>"), e.end()
    }
}), app.get("/search", function(t, e) {
    var a = jsonfile.readFileSync("./data/data.json"),
        r = t.url,
        s = url.parse(r, !0),
        l = s.query,
        n = Object.keys(a),
        u = [];
    if (s.search) {
        if (l.date || l.time) {
            var o = l.date + " " + l.time + " UTC+8",
                c = new Date(o),
                p = c.getUTCFullYear() + "-" + (c.getUTCMonth() + 1) + "-" + c.getUTCDate() + "-" + c.getUTCHours();
            for (i = 0; i < n.length; i++) {
                var m = Object.keys(a[n[i]]);
                for (i2 = 0; i2 < m.length; i2++)
                    if (a[n[i]][m[i2]].timestamp == p) {
                        var d = {};
                        d.name = a[n[i]][m[i2]].name, d.addr = a[n[i]][m[i2]].addr, d.aqi = a[n[i]][m[i2]].aqi, d.time = a[n[i]][m[i2]].timestamp, d.pollutant = a[n[i]][m[i2]].pollutant, d.pollutant.key = a[n[i]][m[i2]].pollutant.key, d.pollutant.value = a[n[i]][m[i2]].pollutant.value, u.push(d)
                    }
            }
        }
        if (0 != u.length) {
            for (e.writeHead(200, {
                    "Content-Type": "text/html"
                }), e.write('<!DOCTYPE HTML><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"></head><body>'), e.write("<table>"), e.write("<tr><th>地點</th><th>時間</th><th>重點汙染值</th></tr>"), i = 0; i < u.length; i++) e.write("<tr><td>" + u[i].name + "</td><td>" + u[i].time + "</td><td>" + u[i].pollutant.key + ": " + u[i].pollutant.value + "</td></tr>");
            e.write("</table>"), e.write("</body></html>"), e.end()
        } else e.status(200).send('<!DOCTYPE HTML><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"><\/script><link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css"><script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"><\/script></head><body><h1>No result founded</h1><hr /><form action="/search" method="get">日期：<input class="datepicker" id="inputdate" type="text" name="date"><br /><br />時間：<input class="timepicker" id="inputtime" type="text" name="time"><br /><br /><input type="submit" value="查詢"></form><script src="/files/custom.js"><\/script></body></html>')
    } else e.status(200).send('<!DOCTYPE HTML><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"><\/script><link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css"><script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"><\/script></head><body><h1>No result founded</h1><hr /><form action="/search" method="get">日期：<input class="datepicker" id="inputdate" type="text" name="date"><br /><br />時間：<input class="timepicker" id="inputtime" type="text" name="time"><br /><br /><input type="submit" value="查詢"></form><script src="/files/custom.js"><\/script></body></html>')
}), app.get("/data", function(t, e) {var datajson = jsonfile.readFileSync('./data/data.json'); res.json(datajson);}), app.listen(process.env.PORT || 5118);
